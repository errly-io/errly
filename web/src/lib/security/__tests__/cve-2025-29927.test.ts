/**
 * Security Tests for CVE-2025-29927 Mitigation
 * 
 * Tests to ensure proper blocking of dangerous headers
 */

import { describe, it, expect, vi } from 'vitest';
import { NextRequest } from 'next/server';
import { validateRequestHeaders } from '../headers';

describe('CVE-2025-29927 Mitigation', () => {
  it('should block x-middleware-subrequest header', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        'x-middleware-subrequest': 'true',
        'user-agent': 'Mozilla/5.0 (compatible; test)',
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(false);
    expect(result.errors).toContain('Suspicious header detected: x-middleware-subrequest');
  });

  it('should allow legitimate headers', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        'authorization': 'Bearer token',
        'user-agent': 'Mozilla/5.0 (compatible; test)',
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(true);
    expect(result.errors).toHaveLength(0);
  });

  it('should block other suspicious headers', () => {
    const suspiciousHeaders = [
      'x-forwarded-host',
      'x-original-url',
      'x-rewrite-url',
    ];

    suspiciousHeaders.forEach((header) => {
      const request = new NextRequest('http://localhost:3000/api/test', {
        method: 'POST',
        headers: {
          'content-type': 'application/json',
          [header]: 'malicious-value',
          'user-agent': 'Mozilla/5.0 (compatible; test)',
        },
      });

      const result = validateRequestHeaders(request);

      expect(result.isValid).toBe(false);
      expect(result.errors).toContain(`Suspicious header detected: ${header}`);
    });
  });

  it('should validate content-type for POST requests', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'POST',
      headers: {
        'user-agent': 'Mozilla/5.0 (compatible; test)',
        // Missing content-type
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(false);
    expect(result.errors).toContain('Missing Content-Type header');
  });

  it('should reject invalid content-type', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'POST',
      headers: {
        'content-type': 'application/xml', // Not in allowed list
        'user-agent': 'Mozilla/5.0 (compatible; test)',
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(false);
    expect(result.errors).toContain('Invalid Content-Type header');
  });

  it('should reject excessively long headers', () => {
    const longValue = 'x'.repeat(10000); // 10KB header
    
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'GET',
      headers: {
        'user-agent': 'Mozilla/5.0 (compatible; test)',
        'x-custom-header': longValue,
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(false);
    expect(result.errors).toContain('Header too long: x-custom-header');
  });

  it('should reject missing or invalid user-agent', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'GET',
      headers: {
        // Missing user-agent
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(false);
    expect(result.errors).toContain('Invalid or missing User-Agent header');
  });

  it('should reject short user-agent', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'GET',
      headers: {
        'user-agent': 'bot', // Too short
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(false);
    expect(result.errors).toContain('Invalid or missing User-Agent header');
  });

  it('should allow GET requests without content-type', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'GET',
      headers: {
        'user-agent': 'Mozilla/5.0 (compatible; test)',
        // No content-type needed for GET
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(true);
    expect(result.errors).toHaveLength(0);
  });

  it('should handle multiple validation errors', () => {
    const request = new NextRequest('http://localhost:3000/api/test', {
      method: 'POST',
      headers: {
        'x-middleware-subrequest': 'true',
        'x-forwarded-host': 'evil.com',
        // Missing content-type and user-agent
      },
    });

    const result = validateRequestHeaders(request);

    expect(result.isValid).toBe(false);
    expect(result.errors).toHaveLength(4); // 2 suspicious headers + missing content-type + missing user-agent
    expect(result.errors).toContain('Suspicious header detected: x-middleware-subrequest');
    expect(result.errors).toContain('Suspicious header detected: x-forwarded-host');
    expect(result.errors).toContain('Missing Content-Type header');
    expect(result.errors).toContain('Invalid or missing User-Agent header');
  });
});
