generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model api_keys {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String    @db.VarChar(255)
  key_hash     String    @unique @db.VarChar(255)
  key_prefix   String    @db.VarChar(20)
  project_id   String?   @db.Uuid
  scopes       String[]  @default([])
  expires_at   DateTime? @db.Timestamptz(6)
  last_used_at DateTime? @db.Timestamptz(6)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  updated_at   DateTime? @default(now()) @db.Timestamptz(6)
  projects     projects? @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([key_hash], map: "idx_api_keys_hash")
  @@index([key_prefix], map: "idx_api_keys_prefix")
  @@index([project_id], map: "idx_api_keys_project")
}

model goose_db_version {
  id         Int      @id @default(autoincrement())
  version_id BigInt
  is_applied Boolean
  tstamp     DateTime @default(now()) @db.Timestamp(6)
}

model spaces {
  id          String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String     @db.VarChar(255)
  slug        String     @unique @db.VarChar(100)
  description String?
  settings    Json?      @default("{}")
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @default(now()) @db.Timestamptz(6)
  projects    projects[]
  users       users[]

  @@index([slug], map: "idx_spaces_slug")
}

model projects {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @db.VarChar(255)
  slug        String    @db.VarChar(100)
  space_id    String?   @db.Uuid
  platform    String    @db.VarChar(100)
  framework   String?   @db.VarChar(100)
  description String?
  settings    Json?     @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  api_keys    api_keys[]
  spaces      spaces?   @relation(fields: [space_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([space_id, slug])
  @@index([space_id], map: "idx_projects_space")
  @@index([space_id, slug], map: "idx_projects_slug")
}

model user_sessions {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id       String?   @db.Uuid
  session_token String    @unique @db.VarChar(255)
  expires_at    DateTime  @db.Timestamptz(6)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_token], map: "idx_user_sessions_token")
  @@index([user_id], map: "idx_user_sessions_user")
}

model users {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String          @unique @db.VarChar(255)
  name          String          @db.VarChar(255)
  avatar_url    String?
  password_hash String?         @db.VarChar(255)
  space_id      String?         @db.Uuid
  role          String?         @default("member") @db.VarChar(50)
  settings      Json?           @default("{}")
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @db.Timestamptz(6)
  user_sessions user_sessions[]
  spaces        spaces?         @relation(fields: [space_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([email], map: "idx_users_email")
  @@index([space_id], map: "idx_users_space")
  @@index([password_hash], map: "idx_users_password")
}
