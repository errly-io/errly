// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_keys.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (
  name, key_hash, key_prefix, project_id, scopes, expires_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, key_hash, key_prefix, project_id, scopes, expires_at, last_used_at, created_at, updated_at
`

type CreateAPIKeyParams struct {
	Name      string             `db:"name" json:"name"`
	KeyHash   string             `db:"key_hash" json:"key_hash"`
	KeyPrefix string             `db:"key_prefix" json:"key_prefix"`
	ProjectID uuid.UUID          `db:"project_id" json:"project_id"`
	Scopes    []string           `db:"scopes" json:"scopes"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKeys, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.Name,
		arg.KeyHash,
		arg.KeyPrefix,
		arg.ProjectID,
		arg.Scopes,
		arg.ExpiresAt,
	)
	var i ApiKeys
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.KeyHash,
		&i.KeyPrefix,
		&i.ProjectID,
		&i.Scopes,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE id = $1
`

func (q *Queries) DeleteAPIKey(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, id)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, name, key_hash, key_prefix, project_id, scopes, expires_at, last_used_at, created_at, updated_at FROM api_keys 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAPIKey(ctx context.Context, id uuid.UUID) (ApiKeys, error) {
	row := q.db.QueryRow(ctx, getAPIKey, id)
	var i ApiKeys
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.KeyHash,
		&i.KeyPrefix,
		&i.ProjectID,
		&i.Scopes,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAPIKeyByHash = `-- name: GetAPIKeyByHash :one
SELECT id, name, key_hash, key_prefix, project_id, scopes, expires_at, last_used_at, created_at, updated_at FROM api_keys 
WHERE key_hash = $1 LIMIT 1
`

func (q *Queries) GetAPIKeyByHash(ctx context.Context, keyHash string) (ApiKeys, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByHash, keyHash)
	var i ApiKeys
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.KeyHash,
		&i.KeyPrefix,
		&i.ProjectID,
		&i.Scopes,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAPIKeyByPrefix = `-- name: GetAPIKeyByPrefix :one
SELECT id, name, key_hash, key_prefix, project_id, scopes, expires_at, last_used_at, created_at, updated_at FROM api_keys 
WHERE key_prefix = $1 LIMIT 1
`

func (q *Queries) GetAPIKeyByPrefix(ctx context.Context, keyPrefix string) (ApiKeys, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByPrefix, keyPrefix)
	var i ApiKeys
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.KeyHash,
		&i.KeyPrefix,
		&i.ProjectID,
		&i.Scopes,
		&i.ExpiresAt,
		&i.LastUsedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAPIKeysByProject = `-- name: ListAPIKeysByProject :many
SELECT id, name, key_hash, key_prefix, project_id, scopes, expires_at, last_used_at, created_at, updated_at FROM api_keys
WHERE project_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAPIKeysByProject(ctx context.Context, projectID uuid.UUID) ([]ApiKeys, error) {
	rows, err := q.db.Query(ctx, listAPIKeysByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKeys{}
	for rows.Next() {
		var i ApiKeys
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.KeyHash,
			&i.KeyPrefix,
			&i.ProjectID,
			&i.Scopes,
			&i.ExpiresAt,
			&i.LastUsedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE api_keys 
SET last_used_at = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, id)
	return err
}
