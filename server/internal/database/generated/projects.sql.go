// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: projects.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  name, slug, space_id, platform, framework, description, settings
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, slug, space_id, platform, framework, description, settings, created_at, updated_at
`

type CreateProjectParams struct {
	Name        string      `db:"name" json:"name"`
	Slug        string      `db:"slug" json:"slug"`
	SpaceID     uuid.UUID   `db:"space_id" json:"space_id"`
	Platform    string      `db:"platform" json:"platform"`
	Framework   pgtype.Text `db:"framework" json:"framework"`
	Description pgtype.Text `db:"description" json:"description"`
	Settings    []byte      `db:"settings" json:"settings"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Projects, error) {
	row := q.db.QueryRow(ctx, createProject,
		arg.Name,
		arg.Slug,
		arg.SpaceID,
		arg.Platform,
		arg.Framework,
		arg.Description,
		arg.Settings,
	)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.SpaceID,
		&i.Platform,
		&i.Framework,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, slug, space_id, platform, framework, description, settings, created_at, updated_at FROM projects
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id uuid.UUID) (Projects, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.SpaceID,
		&i.Platform,
		&i.Framework,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectBySlug = `-- name: GetProjectBySlug :one
SELECT id, name, slug, space_id, platform, framework, description, settings, created_at, updated_at FROM projects
WHERE space_id = $1 AND slug = $2 LIMIT 1
`

type GetProjectBySlugParams struct {
	SpaceID uuid.UUID `db:"space_id" json:"space_id"`
	Slug    string    `db:"slug" json:"slug"`
}

func (q *Queries) GetProjectBySlug(ctx context.Context, arg GetProjectBySlugParams) (Projects, error) {
	row := q.db.QueryRow(ctx, getProjectBySlug, arg.SpaceID, arg.Slug)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.SpaceID,
		&i.Platform,
		&i.Framework,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjectsBySpace = `-- name: ListProjectsBySpace :many
SELECT id, name, slug, space_id, platform, framework, description, settings, created_at, updated_at FROM projects
WHERE space_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListProjectsBySpace(ctx context.Context, spaceID uuid.UUID) ([]Projects, error) {
	rows, err := q.db.Query(ctx, listProjectsBySpace, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Projects{}
	for rows.Next() {
		var i Projects
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.SpaceID,
			&i.Platform,
			&i.Framework,
			&i.Description,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET name = $2, platform = $3, framework = $4, description = $5, settings = $6, updated_at = NOW()
WHERE id = $1
RETURNING id, name, slug, space_id, platform, framework, description, settings, created_at, updated_at
`

type UpdateProjectParams struct {
	ID          uuid.UUID   `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Platform    string      `db:"platform" json:"platform"`
	Framework   pgtype.Text `db:"framework" json:"framework"`
	Description pgtype.Text `db:"description" json:"description"`
	Settings    []byte      `db:"settings" json:"settings"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Projects, error) {
	row := q.db.QueryRow(ctx, updateProject,
		arg.ID,
		arg.Name,
		arg.Platform,
		arg.Framework,
		arg.Description,
		arg.Settings,
	)
	var i Projects
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.SpaceID,
		&i.Platform,
		&i.Framework,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
