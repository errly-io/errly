// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spaces.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSpace = `-- name: CreateSpace :one
INSERT INTO spaces (
  name, slug, description, settings
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, name, slug, description, settings, created_at, updated_at
`

type CreateSpaceParams struct {
	Name        string      `db:"name" json:"name"`
	Slug        string      `db:"slug" json:"slug"`
	Description pgtype.Text `db:"description" json:"description"`
	Settings    []byte      `db:"settings" json:"settings"`
}

func (q *Queries) CreateSpace(ctx context.Context, arg CreateSpaceParams) (Spaces, error) {
	row := q.db.QueryRow(ctx, createSpace,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.Settings,
	)
	var i Spaces
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSpace = `-- name: DeleteSpace :exec
DELETE FROM spaces
WHERE id = $1
`

func (q *Queries) DeleteSpace(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSpace, id)
	return err
}

const getSpace = `-- name: GetSpace :one
SELECT id, name, slug, description, settings, created_at, updated_at FROM spaces 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSpace(ctx context.Context, id uuid.UUID) (Spaces, error) {
	row := q.db.QueryRow(ctx, getSpace, id)
	var i Spaces
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSpaceBySlug = `-- name: GetSpaceBySlug :one
SELECT id, name, slug, description, settings, created_at, updated_at FROM spaces 
WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetSpaceBySlug(ctx context.Context, slug string) (Spaces, error) {
	row := q.db.QueryRow(ctx, getSpaceBySlug, slug)
	var i Spaces
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSpaces = `-- name: ListSpaces :many
SELECT id, name, slug, description, settings, created_at, updated_at FROM spaces
ORDER BY created_at DESC
`

func (q *Queries) ListSpaces(ctx context.Context) ([]Spaces, error) {
	rows, err := q.db.Query(ctx, listSpaces)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Spaces{}
	for rows.Next() {
		var i Spaces
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpace = `-- name: UpdateSpace :one
UPDATE spaces 
SET name = $2, description = $3, settings = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, name, slug, description, settings, created_at, updated_at
`

type UpdateSpaceParams struct {
	ID          uuid.UUID   `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Settings    []byte      `db:"settings" json:"settings"`
}

func (q *Queries) UpdateSpace(ctx context.Context, arg UpdateSpaceParams) (Spaces, error) {
	row := q.db.QueryRow(ctx, updateSpace,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Settings,
	)
	var i Spaces
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
