// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, name, avatar_url, space_id, role, settings
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, email, name, avatar_url, space_id, role, settings, created_at, updated_at
`

type CreateUserParams struct {
	Email     string      `db:"email" json:"email"`
	Name      string      `db:"name" json:"name"`
	AvatarUrl pgtype.Text `db:"avatar_url" json:"avatar_url"`
	SpaceID   uuid.UUID   `db:"space_id" json:"space_id"`
	Role      pgtype.Text `db:"role" json:"role"`
	Settings  []byte      `db:"settings" json:"settings"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
		arg.SpaceID,
		arg.Role,
		arg.Settings,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.SpaceID,
		&i.Role,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, avatar_url, space_id, role, settings, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.SpaceID,
		&i.Role,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, avatar_url, space_id, role, settings, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Users, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.SpaceID,
		&i.Role,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsersBySpace = `-- name: ListUsersBySpace :many
SELECT id, email, name, avatar_url, space_id, role, settings, created_at, updated_at FROM users
WHERE space_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUsersBySpace(ctx context.Context, spaceID uuid.UUID) ([]Users, error) {
	rows, err := q.db.Query(ctx, listUsersBySpace, spaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.AvatarUrl,
			&i.SpaceID,
			&i.Role,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, avatar_url = $3, role = $4, settings = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, email, name, avatar_url, space_id, role, settings, created_at, updated_at
`

type UpdateUserParams struct {
	ID        uuid.UUID   `db:"id" json:"id"`
	Name      string      `db:"name" json:"name"`
	AvatarUrl pgtype.Text `db:"avatar_url" json:"avatar_url"`
	Role      pgtype.Text `db:"role" json:"role"`
	Settings  []byte      `db:"settings" json:"settings"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.AvatarUrl,
		arg.Role,
		arg.Settings,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.SpaceID,
		&i.Role,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
