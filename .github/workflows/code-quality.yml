name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  NODE_VERSION: '20'
  GO_VERSION: '1.21'
  PNPM_VERSION: '8'

jobs:
  # Frontend Code Quality
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm run type-check

      - name: Linting
        run: pnpm run lint

      - name: Security linting
        run: pnpm run lint:security

      - name: Format checking
        run: pnpm run format:check

      - name: Unit tests
        run: pnpm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Backend Code Quality
  backend-quality:
    name: Backend Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Go mod tidy
        run: go mod tidy

      - name: Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Go linting
        run: golangci-lint run --config tools/quality/golangci.yml

      - name: Go security scan
        run: gosec -fmt sarif -out gosec.sarif ./...

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

      - name: Go tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload Go coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: backend
          name: backend-coverage

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Dependency vulnerability scan
        run: pnpm audit --audit-level moderate

      - name: Run security audit script
        run: ./tools/quality/security-audit.sh

      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-audit-report
          path: reports/security/
          retention-days: 30

  # Bundle Analysis
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and analyze bundle
        run: pnpm run bundle:analyze

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: .next/analyze/
          retention-days: 7

  # Code Quality Summary
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-quality, security-audit]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "Frontend Quality: ${{ needs.frontend-quality.result }}"
          echo "Backend Quality: ${{ needs.backend-quality.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [[ "${{ needs.frontend-quality.result }}" == "failure" ||
                "${{ needs.backend-quality.result }}" == "failure" ||
                "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "❌ Quality checks failed"
            exit 1
          else
            echo "✅ All quality checks passed"
          fi
